
99.9      -  float
"False"    - string
False      - bool
'0'       - string
0         - int
True      - bool
'True'    - string
[{}]      - list
{'a': []}  - dictionary



What data type would best represent:

A term or phrase typed into a search box? string
If a user is logged in? bool
A discount amount to apply to a user's shopping cart? float
Whether or not a coupon code is valid? bool
An email address typed into a registration form? list
The price of a product? float
A Matrix? list
The email addresses collected from a registration form? dictionary
Information about applicants to Codeup's data science program? dictionary



# For each of the following code blocks, 
# read the expression and predict what the result of evaluating it would be, 
# then execute the expression in your Python REPL.


'1' + 2 - error

6 % 4 - 2

type(6 % 4) - integer

type(type(6 % 4)) - integer

'3 + 4 is ' + 3 + 4 - error

0 < 0 - true

'False' == False - error

True == 'True' - false

5 >= -5 - false
 
!False or False - error
 
True or "42" - true

!True && !False - false

6 % 5 - 1.something

5 < 4 and 1 == 1 - false

'codeup' == 'codeup' and 'codeup' == 'Codeup' - false

4 >= 0 and 1 !== '1' - true

6 % 3 == 0 - true

5 % 2 != 0 -  true

[1] + 2 - error

[1] + [2] - 3

[1] * 2 - 1,1

[1] * [2] - [2][2]

[] + [] == [] - []

{} + {} - true

# You have rented some movies for your kids:
 #The little mermaid (for 3 days), Brother Bear (for 5 days, they love it), 
 #and Hercules (1 day, you don't know yet if they're going to like it). If price for a movie per day is 3 dollars, how much will you have to pay?

threeday = 3 * 3   
fiveday = 3 * 5 
oneday = 1 * 3  
threeday + fiveday + oneday  = 27

#Suppose you're working as a contractor for 3 companies: 
# Google, Amazon and Facebook, they pay you a different rate per hour.
#  Google pays 400 dollars per hour, Amazon 380, and Facebook 350. 
# How much will you receive in payment for this week? You worked 10 hours for Facebook, 6 hours for Google and 4 hours for Amazon.

google = 400 * 6 
amazon = 380 * 4
facebook = 350 * 10
google + amazon + facebook = 7420

#A student can be enrolled to a class only if the class is not full and the class schedule does not conflict with her current schedule.
class = full
can_enroll = true if class{} == "not_full" else False



#A product offer can be applied only if people buys more than 2 items, 
# and the offer has not expired. Premium members do not need to buy a specific amount of products.


# 17 list comprehension problems in python

fruits = ['mango', 'kiwi', 'strawberry', 'guava', 'pineapple', 'mandarin orange']

numbers = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 17, 19, 23, 256, -8, -4, -2, 5, -9]

# Example for loop solution to add 1 to each number in the list
numbers_plus_one = []
for number in numbers:
    numbers_plus_one.append(number + 1)

# Example of using a list comprehension to create a list of the numbers plus one.
numbers_plus_one = [number + 1 for number in numbers]

# Example code that creates a list of all of the list of strings in fruits and uppercases every string
output = []
for fruit in fruits:
    output.append(fruit.upper())
    
# Exercise 1 - rewrite the above example code using list comprehension syntax. Make a variable named uppercased_fruits to hold the output of the list comprehension. Output should be ['MANGO', 'KIWI', etc...]
uppercased_fruits = [fruit.upper() for fruit in fruits]
# Exercise 2 - create a variable named capitalized_fruits and use list comprehension syntax to produce output like ['Mango', 'Kiwi', 'Strawberry', etc...]
capitalized_fruits = [fruit.title() for fruit in fruits]
# Exercise 3 - Use a list comprehension to make a variable named fruits_with_more_than_two_vowels. Hint: You'll need a way to check if something is a vowel.
vowelcount = [fruit for fruit in fruits if fruit.count("a") + fruit.count("e") + fruit.count("i") + fruit.count("o") + fruit.count("u") > 2 ]       
# Exercise 4 - make a variable named fruits_with_only_two_vowels. The result should be ['mango', 'kiwi', 'strawberry']
fruits_with_only_two_vowels = [fruit for fruit in fruits if fruit.count("a") + fruit.count("e") + fruit.count("i") + fruit.count("u") == 2]
# Exercise 5 - make a list that contains each fruit with more than 5 characters
char_fruit = [fruit for fruit in fruits if len(fruit) > 5]
# Exercise 6 - make a list that contains each fruit with exactly 5 characters
exactly_char_fruit = [fruit for fruit in fruits if len(fruit) == 5]
# Exercise 7 - Make a list that contains fruits that have less than 5 characters
less_char_fruit = [fruit for fruit in fruits if len(fruit) < 5]
# Exercise 8 - Make a list containing the number of characters in each fruit. Output would be [5, 4, 10, etc... ]
char_count_fruit = [fruit for fruit in fruits 

# Exercise 9 - Make a variable named fruits_with_letter_a that contains a list of only the fruits that contain the letter "a"

# Exercise 10 - Make a variable named even_numbers that holds only the even numbers 
even_numbers = [number for number in  numbers if number % 2 == 0]
# Exercise 11 - Make a variable named odd_numbers that holds only the odd numbers
odd_numbers = [number for number in numbers if number % 2 == 1]
# Exercise 12 - Make a variable named positive_numbers that holds only the positive numbers
positive_numbers = [number for number in numbers if number >= 0]
# Exercise 13 - Make a variable named negative_numbers that holds only the negative numbers
negative_numbers = [number for number in numbers if number < 0]
# Exercise 14 - use a list comprehension w/ a conditional in order to produce a list of numbers with 2 or more numerals
more_than_two_numerials = [number for number in number if number >= 10]
# Exercise 15 - Make a variable named numbers_squared that contains the numbers list with each element squared. Output is [4, 9, 16, etc...]
numbers_squared = [number for number in numbers if number ** 2] 
# Exercise 16 - Make a variable named odd_negative_numbers that contains only the numbers that are both odd and negative.
odd_negative_numbers = [number for number in numbers if number % 2 == 1 and number < 0]
# Exercise 17 - Make a variable named numbers_plus_5. In it, return a list containing each number plus five. 
number_plus_5 = [number + 5 for number in  numbers]
# BONUS Make a variable named "primes" that is a list containing the prime numbers in the numbers list. *Hint* you may want to make or find a helper function that determines if a given number is prime or not.
primehelp = [1,3,5,7,9,11,13]  
primes = [number for number in numbers if number in primehelp] 





#### 20 data manipulation exercises
#How many students are there?
number = len(students) 
14
#How many students prefer light coffee? For each type of coffee roast?
coffee = len([student['coffee_preference'] for student in students if student['coffee_preference'] == 'light']) 
3 
#How many types of each pet are there?
pets = [student['pets'] for student in students]
nested_pets = sum(pets,[])
unique_animals = [pet['species'] for pet in nested_pets]
unique_pets = len(set(unique_animals))
outputs: 3                                              
#How many grades does each student have? Do they all have the same number of grades?
student_grades = [student["grades"] for student in students]                       

#What is each student's grade average?
#How many pets does each student have?
#How many students are in web development? data science?
#What is the average number of pets for students in web development?
#What is the average pet age for students in data science?
#What is most frequent coffee preference for data science students?
#What is the least frequent coffee preference for web development students?
#What is the average grade for students with at least 2 pets?
#How many students have 3 pets?
#What is the average grade for students with 0 pets?
#What is the average grade for web development students? data science students?
#What is the average grade range (i.e. highest grade - lowest grade) for dark coffee drinkers?
#What is the average number of pets for medium coffee drinkers?
#What is the most common type of pet for web development students?
#What is the average name length?
#What is the highest pet age for light coffee drinkers?